<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Resume</title>
      <link href="/2021/10/12/resume/"/>
      <url>/2021/10/12/resume/</url>
      
        <content type="html"><![CDATA[<h4 id="詹灏鑫"><a href="#詹灏鑫" class="headerlink" title="詹灏鑫"></a>詹灏鑫</h4><p><a href="mailto:haoxinzhan@gmail.com" target="_blank" rel="noopener">haoxinzhan@gmail.com</a>   •   +86 15084907014   •   <a href="http://zhanhaoxin.club/" target="_blank" rel="noopener">Blog</a>   •   <a href="https://github.com/Zhanhaoxin" target="_blank" rel="noopener">Github</a></p><hr><h4 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h4><p><strong>中南大学 — 学士</strong>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <strong>数学与统计学院—信息与计算科学</strong>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2015—2019</p><hr><h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><p>​    <strong>华为 — 消费者BG</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>华为应用市场分发中台</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2021.4—至今</p><ul><li><p>负责华为应用市场垂直业务相关的后端开发工作，使用Java语言，ServiceComb，Redis，Kafka等工具进行微服务的开发与维护</p></li><li><p>参与了支撑未来5—10年业务发展的动态布局2.0需求的开发，上线周期短，与多个团队跨部门合作开发</p></li><li><p>负责分析和优化服务端的慢SQL和超时接口</p></li></ul><p>​    <strong>华为 — ICT产品与解决方案</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>华为MAE产品部</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2019.7—2021.3</p><ul><li><p>负责华为MAE产品Assurance侧服务端需求的开发，使用Java、Scala语言，Spark，Hive等工具进行需求的开发和处理</p></li><li><p>作为Owner负责了产品的代码质量提升工作，通过持续重构2020年代码规模零增长，代码重复率、编码规范等各项指标下降80%，持续为每个开发者赋能，不断提高Clean Code意识</p></li><li><p>作为特性Owner，端到端负责了需求的设计、分解、开发、测试、交付</p></li></ul><hr><h4 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h4><p>​    <strong>微服务平台切换项目</strong></p><ul><li><p>主动提出承担切换CloudSOP微服务平台预研，参与切平台路线演进规划，提前识别切换平台风险</p></li><li><p>担任MBB组内切换微服务平台Owner，牵头进行组内存量服务拆分的分析和设计，输出微服务拆分详细设计及规则制定，负责组内核心服务：查询服务、配置管理服务、GIS服务的切换工作</p></li><li><p>构建基于新的CloudSop微服务平台的多项基础框架能力，包括数据库访问组件、RPC组件、公共存储服务及文件切片传输等并输出服务端的切换指导文档，保障整个产品平滑演进</p></li></ul><p>​    <strong>ThriftServer基于SparkSQL引擎替代Oracle项目</strong></p><ul><li><p>前期参与了去Oracle数据库项目可行性预研分析，验证在业务经典查询场景下，不同架构数据库的性能表现并确立了Hadoop+SparkSQL+ORC的演进方向</p></li><li><p>参与了MAE SparkSQL替换Oracle项目的开发。主要负责查询框架代码适配和性能优化</p></li></ul><hr><h4 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h4><ul><li><p>熟悉Java/Scala/Python，熟悉常用的数据结构，算法，数据库和分布式系统原理</p></li><li><p>熟悉使用Git，Maven，Intellij等工具，Spring，Redis，Kafka，Mysql等中间件</p></li><li><p>有代码洁癖，对代码质量的要求高，CodeRview文化推行者，建设者</p></li><li><p>热爱技术，具有较强的钻研能力，善于思考和优化，善于关注团队的技术债务，框架的腐化问题，不断提升自己和团队的开发效率</p></li><li><p>有需求分析和设计的能力，能快速理解业务需求并进行相关逻辑的设计，并输出设计文档</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL慢SQL优化实践</title>
      <link href="/2021/08/11/mysql-man-sql-you-hua-shi-jian/"/>
      <url>/2021/08/11/mysql-man-sql-you-hua-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL慢SQL优化实践"><a href="#MySQL慢SQL优化实践" class="headerlink" title="MySQL慢SQL优化实践"></a>MySQL慢SQL优化实践</h1><h2 id="一、如何知道哪些SQL是慢SQL"><a href="#一、如何知道哪些SQL是慢SQL" class="headerlink" title="一、如何知道哪些SQL是慢SQL?"></a>一、如何知道哪些SQL是慢SQL?</h2><p>定位执行效率比较低的SQL语句，可以通过<strong>慢查询日志</strong>来进行定位。</p><p>MySQL 中提供了一个慢查询的日志记录功能，可以把<u>查询 SQL 语句时间大于多少秒的语句写入慢查询日志</u>，日常维护中可以通过慢查询日志的记录信息快速准确地判断问题所在。用 <strong>–log-slow-queries</strong> 选项启动时，mysqld 会写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件，通过查看这个日志文件定位效率较低的 SQL 。</p><p>我们先查询 MySQL 慢查询日志是否开启：</p><pre><code>show variables like "%slow%";</code></pre><p>慢查询日志会在查询结束以后才记录</p><h2 id="二、通过-EXPLAIN-命令分析-SQL-的执行计划"><a href="#二、通过-EXPLAIN-命令分析-SQL-的执行计划" class="headerlink" title="二、通过 EXPLAIN 命令分析 SQL 的执行计划"></a>二、通过 EXPLAIN 命令分析 SQL 的执行计划</h2><h2 id="三、EXPLAIN-参数详解"><a href="#三、EXPLAIN-参数详解" class="headerlink" title="三、EXPLAIN 参数详解"></a>三、EXPLAIN 参数详解</h2><ol><li><p>explain 包含的参数</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</td></tr><tr><td>select_type</td><td>查询类型</td></tr><tr><td>table</td><td>正在访问哪个表</td></tr><tr><td>partitions</td><td>匹配的分区</td></tr><tr><td>type</td><td>当前表内访问方式 join type</td></tr><tr><td>possible_keys</td><td>显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</td></tr><tr><td>key</td><td>实际使用到的索引，如果为NULL，则没有使用索引</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</td></tr><tr><td>ref</td><td>显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</td></tr><tr><td>rows</td><td>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</td></tr><tr><td>filtered</td><td>查询的表行占表的百分比</td></tr><tr><td>Extra</td><td>包含不适合在其它列中显示但十分重要的额外信息</td></tr></tbody></table></li><li><p>各个参数含义详解</p></li></ol><ul><li><p>id参数</p><ul><li><p>Id相同: 执行顺序从上至下</p><img src="/2021/08/11/mysql-man-sql-you-hua-shi-jian/16f73fe26adaae0d~tplv-t2oaga2asx-watermark-8696244.awebp.png" title="id相同"></li><li><p>Id不同: 如果是子查询，id的序号会递增，id的值越大优先级越高，越先被执行</p><img src="/2021/08/11/mysql-man-sql-you-hua-shi-jian/16f73fe26afbac8b~tplv-t2oaga2asx-watermark.awebp" title="id不同"></li><li><p>id相同又不同: id如果相同，可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</p><img src="/2021/08/11/mysql-man-sql-you-hua-shi-jian/16f73fe26c3182b4~tplv-t2oaga2asx-watermark.awebp" title="id相同又不同"></li></ul></li></ul><ul><li><p>select_type参数</p><p><code>select_type</code> 表示了查询的类型</p><table><thead><tr><th>select_type参数值</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单查询，不包含子查询或Union查询</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子部分，最外层查询则被标记为主查询</td></tr><tr><td>UNION</td><td>若第二个select出现在uion之后，则被标记为UNION</td></tr><tr><td>DEPENDENT UNION</td><td>UNION 中的第二个或后面的查询语句, 取决于外面的查询</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的selec</td></tr><tr><td>DERIVED</td><td>在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL 会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>SUBQUERY</td><td>在select或where中包含子查询</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</td></tr></tbody></table></li></ul><ul><li><p>table参数</p><p>表示数据来自哪张表或者衍生表</p></li></ul><ul><li><p>partitions参数</p><p>匹配的分区</p></li></ul><ul><li><p>type参数</p><p><code>type</code> 字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过 <code>type</code> 字段, 我们判断此次查询是 <code>**全表扫描**</code> 还是 <code>**索引扫描**</code> 等。它的不同类型的性能由好到差分别是：</p><table><thead><tr><th>type参数取值</th><th align="left">含义</th></tr></thead><tbody><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_system" target="_blank" rel="noopener">system</a></td><td align="left">表中仅有一条数据时，该表的查询就像查询常量表一样</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_const" target="_blank" rel="noopener">const</a></td><td align="left">当表中只有一条记录匹配时，比如使用了表主键（primary key）或者表唯一索引（unique index）进行查询</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_eq_ref" target="_blank" rel="noopener">eq_ref</a></td><td align="left">表示多表连接时使用表主键或者表唯一索引，比如 select A.text, B.text where A.ID = B.ID 这个查询语句，对于 A 表中的每一个 ID 行，B 表中都只能有唯一的 B.Id 来进行匹配时</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_ref" target="_blank" rel="noopener">ref</a></td><td align="left">这个类型不如上面的 eq-ref 快，因为它表示的是因为对于表 A 中扫描的每一行，表 C 中有几个可能的行，C.ID 不是唯一的</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_ref_or_null" target="_blank" rel="noopener">ref_or_null</a></td><td align="left">与 ref 类似，只不过这个选项包含对 NULL 的查询</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_index_merge" target="_blank" rel="noopener">index_merge</a></td><td align="left">查询语句使用了两个以上的索引，比如经常在有 and 和 or 关键字出现的场景，但是在由于读取索引过多导致其性能有可能还不如 range</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_unique_subquery" target="_blank" rel="noopener">unique_subquery</a></td><td align="left">这个选项经常用在 in 关键字后面，子查询带有 where 关键字的子查询中，用 sql 来表示就是这样 value IN (SELECT primary_key FROM single_table WHERE some_expr)</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_range" target="_blank" rel="noopener">range</a></td><td align="left">引范围查询，常见于使用 =，&lt;&gt;，&gt;，&gt;=，&lt;，&lt;=，IS NULL，&lt;=&gt;，BETWEEN，IN() 或者 like 等运算符的查询中</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_index" target="_blank" rel="noopener">index</a></td><td align="left">索引全表扫描，把索引从头到尾扫一遍</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_all" target="_blank" rel="noopener">ALL</a></td><td align="left">这个我们接触的最多了，就是全表查询，select * from xxx ，性能最差</td></tr></tbody></table><img src="/2021/08/11/mysql-man-sql-you-hua-shi-jian/640.png" title="不同type参数执行效率"></li></ul><ul><li><p>possible_keys参数</p><p><code>possible_keys</code> 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定.</p></li></ul><ul><li><p>key参数</p><p>实际使用到的索引，如果为NULL，则没有使用索引 查询中若使用了覆盖索引（查询的列刚好是索引），则该索引仅出现在key列表</p></li></ul><ul><li><p>key_len参数</p><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确度的情况下，长度越短越好。key_len显示的值为索引字段最大的可能长度，并非实际使用长度 即key_len是根据定义计算而得，不是通过表内检索出的</p></li></ul><ul><li><p>ref参数</p><p>显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</p></li></ul><ul><li><p>rows参数</p><p>rows 也是一个<strong>重要</strong>的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.<br>这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p></li></ul><ul><li><p>filtered参数</p><p>通过查询条件查询出来的 SQL 数量占用总行数的比例·    </p></li></ul><ul><li><p>Extra参数</p><p>更多Extra参数信息见mysql<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain-extra-information" target="_blank" rel="noopener">官方文档</a></p></li></ul><h2 id="四、两个慢查询案例"><a href="#四、两个慢查询案例" class="headerlink" title="四、两个慢查询案例"></a>四、两个慢查询案例</h2><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><p><a href="https://tech.meituan.com/2014/06/30/mysql-index.html" target="_blank" rel="noopener">https://tech.meituan.com/2014/06/30/mysql-index.html</a><br><a href="https://weikeqin.com/2020/02/05/mysql-explain/" target="_blank" rel="noopener">https://weikeqin.com/2020/02/05/mysql-explain/</a><br><a href="https://juejin.cn/post/6844904035900719111" target="_blank" rel="noopener">https://juejin.cn/post/6844904035900719111</a><br><a href="https://developer.aliyun.com/article/779151" target="_blank" rel="noopener">https://developer.aliyun.com/article/779151</a><br><a href="https://mp.weixin.qq.com/s/rEGNz2XUWQyuhRO-F01RWQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/rEGNz2XUWQyuhRO-F01RWQ</a><br><a href="https://segmentfault.com/a/1190000012155267" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012155267</a><br><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008131735</a><br><a href="https://github.com/YufeizhangRay/MySQL#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E6%85%A2sql" target="_blank" rel="noopener">https://github.com/YufeizhangRay/MySQL#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E6%85%A2sql</a><br><a href="https://zhuanlan.zhihu.com/p/71616887" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/71616887</a><br><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-extended.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/explain-extended.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向代理和反向代理</title>
      <link href="/2021/07/28/zheng-xiang-dai-li-he-fan-xiang-dai-li/"/>
      <url>/2021/07/28/zheng-xiang-dai-li-he-fan-xiang-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理（forward proxy）：”它<strong>代理的是客户端</strong>，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，<strong>客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端</strong>。客户端必须要进行一些特别的设置才能使用正向代理。</p><p>正向代理最大的特点是<strong><u>客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息</u></strong>。</p><img src="/2021/07/28/zheng-xiang-dai-li-he-fan-xiang-dai-li/image-20210728002118847.png" title="正向代理"><p>正向代理的用途：</p><ul><li>访问原来无法访问的资源，如Google </li><li>可以做缓存，加速访问资源 </li><li>对客户端访问授权，上网进行认证 </li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ul><p>正向代理的例子：Proxy、跳板机、租房中介、火车票代售点……</p><hr><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理（reverse proxy）：是指以代理服务器来接受internet上的连接请求，然后按照一定的规则分发给内部网络上的业务处理服务器进行处理，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。此时请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确。</p><p><strong>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</strong></p><img src="/2021/07/28/zheng-xiang-dai-li-he-fan-xiang-dai-li/image-20210728002327875.png" title="反向代理"><p>反向代理的用途： </p><ul><li>保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网 </li><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ul><hr><h2 id="正向代理和反向代理的区别点总结"><a href="#正向代理和反向代理的区别点总结" class="headerlink" title="正向代理和反向代理的区别点总结"></a>正向代理和反向代理的区别点总结</h2><p>虽然正向代理服务器和反向代理服务器所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端，但是二者之间还是有一定的差异的。</p><ol><li><strong>正向代理其实是客户端的代理</strong>，帮助客户端访问其无法访问的服务器资源。<strong>反向代理则是服务器的代理</strong>，帮助服务器做负载均衡，安全防护等。</li><li><strong>正向代理一般是客户端架设的</strong>，比如在自己的机器上安装一个代理软件。而<strong>反向代理一般是服务器架设的</strong>，比如在自己的机器集群中部署一个反向代理服务器。</li><li><strong>正向代理中，服务器不知道真正的客户端到底是谁</strong>，以为访问自己的就是真实的客户端。而在<strong>反向代理中，客户端不知道真正的服务器是谁</strong>，以为自己访问的就是真实的服务器。</li><li>正向代理和反向代理的作用和目的不同。<strong>正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。</strong></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存更新策略</title>
      <link href="/2021/05/25/huan-cun-geng-xin-ce-lue/"/>
      <url>/2021/05/25/huan-cun-geng-xin-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h1><p>一、Cache-Aside</p><p>这是最常见的一种缓存应用模式，整个过程也很好理解。</p><p>数据获取策略：</p><ul><li>应用先去查看缓存是否有所需数据；</li><li>如果有，应用直接将缓存数据返回给请求方；</li><li>如果没有，应用执行原始逻辑，例如查询数据库得到结果数据；</li><li>应用将结果数据写入缓存。</li></ul><img src="/2021/05/25/huan-cun-geng-xin-ce-lue/Cache-Aside.png" title="Cache-Aside"><p>我们见到的多数缓存，例如前面提到的拦截过滤器中的缓存，基本上都是按照这种方式来配置和使用的。</p><p>数据读取的异常情形：</p><ul><li>如果数据库读取异常，直接返回失败，没有数据不一致的情况发生；</li><li>如果数据库读取成功，但是缓存写入失败，那么下一次同一数据的访问还将继续尝试写入，因此这时也没有不一致的情况发生。</li></ul><p>可见，这两种异常情形都是“安全”的。</p><p>数据更新策略：</p><ul><li><p>应用先更新数据库；</p></li><li><p>应用再令缓存失效。</p></li></ul><p>这里，避免踩坑的关键点有两个：</p><p>数据更新的这个策略，通常来说，最重要的一点是<strong>必须先更新数据库，而不是先令缓存失效</strong>，即这个顺序不能倒过来。原因在于，如果先令缓存失效，那么在数据库更新成功前，如果有另外一个请求访问了缓存，发现缓存数据库已经失效，于是就会按照数据获取策略，从数据库中使用这个已经陈旧的数值去更新缓存中的数据，这就导致这个过期的数据会长期存在于缓存中，最终导致数据不一致的严重问题。</p><p>如果先令缓存失效，再更新数据库，为什么会导致问题：</p><img src="/2021/05/25/huan-cun-geng-xin-ce-lue/先缓存失效再更新数据库.png" title="先缓存失效再更新数据库"><p>第二个关键点是，<strong>数据库更新以后，需要令缓存失效，而不是更新缓存为数据库的最新值</strong>。为什么呢？你想一下，如果两个几乎同时发出的请求分别要更新数据库中的值为 A 和 B，如果结果是 B 的更新晚于 A，那么数据库中的最终值是 B。但是，如果在数据库更新后去更新缓存，而不是令缓存失效，那么缓存中的数据就有可能是 A，而不是 B。因为数据库虽然是“更新为 A”在“更新为 B”之前发生，但如果不做特殊的跨存储系统的事务控制，缓存的更新顺序就未必会遵从“A 先于 B”这个规则，这就会导致这个缓存中的数据会是一个长期错误的值 A。</p><p>这张图可以帮你理解，如果是更新缓存为数据库最新值，而不是令缓存失效，为什么会产生问题：</p><img src="/2021/05/25/huan-cun-geng-xin-ce-lue/先更新缓存而不是先让其失效.png" title="先更新缓存而不是先让其失效"><p>如果是令缓存失效，这个问题就消失了。因为 B 是后写入数据库的，那么在 B 写入数据库以后，无论是写入 B 的请求让缓存失效，还是并发的竞争情形下写入 A 的请求让缓存失效，缓存反正都是失效了。那么下一次的访问就会从数据库中取得最新的值，并写入缓存，这个值就一定是 B。</p><p><strong>这两个关键点非常重要，而且不当使用引起的错误还非常常见</strong>，希望你可以完全理解它们。</p><p>数据更新的异常情形：</p><ul><li>如果数据库操作失败，那么直接返回失败，没有数据不一致的情况发生；</li><li>如果数据库操作成功，但是缓存失效操作失败，这个问题很难发生，但一旦发生就会非常麻烦，缓存中的数据是过期数据，需要特殊处理来纠正。</li></ul><p>二、Read-Through</p><p>这种情况下缓存系统彻底变成了它身后数据库的代理，二者成为了一个整体，应用的请求访问只能看到缓存的返回数据，而数据库系统对它是透明的。</p><img src="/2021/05/25/huan-cun-geng-xin-ce-lue/Read-Through.png" title="Read-Through"><p>有的框架提供的内置缓存，例如一些 ORM 框架，就是按这种 Read-Through 和 Write-Through 来实现的。</p><p>数据获取策略：</p><ul><li>应用向缓存要求数据；</li><li>如果缓存中有数据，返回给应用，应用再将数据返回；</li><li>如果没有，缓存查询数据库，并将结果写入自己；</li><li>缓存将数据返回给应用。</li></ul><p>数据读取异常的情况分析和 Cache-Aside 类似，没有数据不一致的情况发生。</p><p>三、Write-Through</p><p>和 Read-Through 类似，图示同上，但 Write-Through 是用来处理数据更新的场景。</p><p>数据更新策略：</p><ul><li>应用要求缓存更新数据；</li><li>如果缓存中有对应数据，先更新该数据；</li><li>缓存再更新数据库中的数据；</li><li>缓存告知应用更新完成。</li></ul><p>这里的一个关键点是，<strong>缓存系统需要自己内部保证并发场景下，缓存更新的顺序要和数据库更新的顺序一致</strong>。比如说，两个请求分别要把数据更新为 A 和 B，那么如果 B 后写入数据库，缓存中最后的结果也必须是 B。这个一致性可以用乐观锁等方式来保证。</p><p>数据更新的异常情形：</p><ul><li><p>如果缓存更新失败，直接返回失败，没有数据不一致的情况发生；</p></li><li><p>如果缓存更新成功，数据库更新失败，这种情况下需要回滚缓存中的更新，或者干脆从缓存中删除该数据。</p></li></ul><p>还有一种和 Write-Through 非常类似的数据更新模式，叫做 Write-Around。它们的区别在于 Write-Through 需要更新缓存和数据库，而  Write-Around 只更新数据库（缓存的更新完全留给读操作）。</p><p>四、Write-Back</p><p>对于 Write-Back 模式来说，更新操作发生的时候，数据写入缓存之后就立即返回了，而数据库的更新异步完成。这种模式在一些分布式系统中很常见。</p><p>这种方式带来的最大好处是拥有最大的请求吞吐量，并且操作非常迅速，数据库的更新甚至可以批量进行，因而拥有杰出的更新效率以及稳定的速率，这个缓存就像是一个写入的缓冲，可以平滑访问尖峰。另外，对于存在数据库短时间无法访问的问题，它也能够很好地处理。</p><p>但是它的弊端也很明显，异步更新一定会存在着不可避免的一致性问题，并且也存在着数据丢失的风险（数据写入缓存但还未入库时，如果宕机了，那么这些数据就丢失了）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存更新策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="/2021/05/02/redis-xue-xi-bi-ji/"/>
      <url>/2021/05/02/redis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Redis的“两大维度，三大主线”</p><p><img src="https://static001.geekbang.org/resource/image/79/e7/79da7093ed998a99d9abe91e610b74e7.jpg" alt="img"></p><p>redis问题画像图</p><p><img src="https://static001.geekbang.org/resource/image/70/b4/70a5bc1ddc9e3579a2fcb8a5d44118b4.jpeg" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京的秋天</title>
      <link href="/2019/10/04/bei-jing-de-qiu-tian/"/>
      <url>/2019/10/04/bei-jing-de-qiu-tian/</url>
      
        <content type="html"><![CDATA[<p>一场雨送走了北京的夏天，气温降下来了，开始变得有点冷，树叶依旧还是绿的，再过段时间树叶全部变成黄色的时候，就又到了一年里北方城市最美丽的时候。</p><p>小时候，看史铁生的《我与地坛》，脑海中北京的秋天是美的，去年在北京实习，树叶变黄之后也到地坛公园去坐了坐，真的好美。看着金黄色的银杏叶一片一片掉下来，又想起了《我与地坛》，想起了史铁生和他的母亲，我竟又十分感动。</p><p>或许美的不是地坛，不是北京的秋天，而是那一分钟的感觉。</p><img src="/2019/10/04/bei-jing-de-qiu-tian/fall.jpeg" title="2018年秋天拍摄于北理工"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京 </tag>
            
            <tag> 秋天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快学Scala——基础知识</title>
      <link href="/2019/09/03/kuai-xue-scala-ji-chu-zhi-shi/"/>
      <url>/2019/09/03/kuai-xue-scala-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a><strong>要点</strong></h4><ol><li><p>使用val声明一个常量，var声明一个变量。</p></li><li><p>Scala中变量和函数的类型总是写在变量和函数名的后面。例如：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> greeting <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">val</span> greeting <span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token string">"hello"</span></code></pre></li><li><p>每行不需要使用分号结尾</p></li><li><p>不区分基本类型和引用类型，Byte、Char、Short、Int、Long、Float、Double和Boolean类型都是类。StringOps类中有对字符串的数百种操作。</p></li><li><p>Scala没有++操作符，需要使用+=：<br><code>counter += 1</code></p></li><li><p>Scala没有静态方法，有类似的特性叫做单例对象，通常，一个类对应一个伴生对象，伴生对象的方法类似于静态方法。</p></li><li><p>调用没有参数的方法的时候可以不带括号，例如：<br><code>"hello".distinct</code></p></li></ol><hr><h4 id="感受"><a href="#感受" class="headerlink" title="感受"></a><strong>感受</strong></h4><p>1.看了快学Scala的第一章，对scala的初始感觉是：觉得scala有点像python，对函数的调用和运算符的操作都比较简结，尤其是对BigNumber操作，不像Java那么繁琐。</p><p>2.学会使用Scala doc查看API。</p><hr><p><strong>计划安排</strong></p><table><thead><tr><th>章节</th><th>重要程度</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td>1 基础</td><td>高</td><td>9.03</td><td>9.03</td></tr><tr><td>2 控制结构和函数</td><td>高</td><td>9.04</td><td></td></tr><tr><td>3 数组相关操作</td><td>高</td><td>9.04</td><td></td></tr><tr><td>4 映射和元组</td><td>高</td><td>9.04</td><td></td></tr><tr><td>5 类</td><td>高</td><td>9.05</td><td></td></tr><tr><td>6 对象</td><td>高</td><td>9.05</td><td></td></tr><tr><td>7 包和引入</td><td>高</td><td>9.05</td><td></td></tr><tr><td>8 继承</td><td>高</td><td>9.06</td><td></td></tr><tr><td>9   文件和正则表达式</td><td>高</td><td>9.06</td><td></td></tr><tr><td>10 特质</td><td>高</td><td>9.06</td><td></td></tr><tr><td>11 操作符</td><td>高</td><td>9.09</td><td></td></tr><tr><td>12 高阶函数</td><td>中</td><td>9.09</td><td></td></tr><tr><td>13 集合</td><td>高</td><td>9.09</td><td></td></tr><tr><td>14   模式匹配和样例类</td><td>高</td><td>9.10</td><td></td></tr><tr><td>15 注解</td><td>中</td><td>9.10</td><td></td></tr><tr><td>16 XML处理</td><td>中</td><td>9.10</td><td></td></tr><tr><td>17 类型参数</td><td>中</td><td>9.10</td><td></td></tr><tr><td>18 高级类型</td><td>高</td><td>9.11</td><td></td></tr><tr><td>19 解析</td><td>中</td><td>9.11</td><td></td></tr><tr><td>20 Actor</td><td>低</td><td>9.12</td><td></td></tr><tr><td>21   隐式转换和隐式参数</td><td>中</td><td>9.12</td><td></td></tr><tr><td>22 定界延续</td><td>低</td><td>9.12</td><td></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
